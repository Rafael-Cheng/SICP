(define (_cons x y)
    (* (power 2 x)
       (power 3 y)))
(define (power a n)
    (cond ((= 0 n) 1)
	    ((even? n) (power (* a a) (/ n 2)))
        (else (* a (power (* a a) (/ (- n 1) 2))))))

(define (_car z)
    (/ (log (pure z 3))
       (log 2)))
(define (_cdr z)
    (/ (log (pure z 2))
       (log 3)))
(define (pure a n)
    (cond ((= 0 (remainder a n))
          (pure (/ a n) n))
          (else a)))

(define n (_cons 12 9))
(_car n)
(_cdr n)
