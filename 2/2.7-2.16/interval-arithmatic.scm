(define (make-interval a b) (cons a b))
(define (lower-bound i) (car i))
(define (upper-bound i) (cdr i))

(define (add-interval x y)
    (make-interval (+ (lower-bound x) (lower-bound y))
                   (+ (upper-bound x) (upper-bound y))))
(define (sub-interval x y)
    (make-interval (- (lower-bound x) (upper-bound y))
                   (- (upper-bound x) (lower-bound y))))
(define (mul-interval x y)
    (let ((lx (lower-bound x))
          (ux (upper-bound x))
          (ly (lower-bound y))
          (uy (upper-bound y)))
          (cond ((and (>= lx 0) (>= ly 0))
                (make-interval (* lx ly) (* ux uy)))
                ((and (>= lx 0) (<= uy 0))
                (make-interval (* ux ly) (* lx uy)))
                ((and (>= lx 0) (< (* ly uy) 0))
                (make-interval (* ux ly) (* ux uy)))
                ((and (<= ux 0) (>= ly 0))
                (make-interval (* lx uy) (* ux ly)))
                ((and (<= ux 0) (<= uy 0))
                (make-interval (* ux uy) (* lx ly)))
                ((and (<= ux 0) (< (* ly uy) 0))
                (make-interval (* lx uy) (* lx ly)))
                ((and (< (* lx ux) 0) (>= ly 0))
                (make-interval (* lx uy) (* ux uy)))
                ((and (< (* lx ux) 0) (<= uy 0))
                (make-interval (* ux ly) (* lx ly)))
                ((and (< (* lx ux) 0) (< (* ly uy) 0))
                (make-interval (min (* lx uy) (* ux ly))
                               (max (* lx ly) (* ux uy)))))))
;have some bugs for intervals that traverse 0
(define (div-interval x y)
    (mul-interval x
        (make-intervall (/ 1.0 (upper-bound y))
                        (/ 1.0 (lower-bound y)))))

;test-driver
(define (print-interval i)
    (newline)
    (display "[")
    (display (lower-bound i))
    (display ",")
    (display (upper-bound i))
    (display "]"))

(define interval1 (make-interval 1 3))
(define interval2 (make-interval -7 -3))
(define interval3 (make-interval -2 9))
(print-interval interval1)
(print-interval interval2)
(print-interval interval3)
(print-interval (mul-interval interval1 interval1))
(print-interval (mul-interval interval1 interval2))
(print-interval (mul-interval interval1 interval3))
(print-interval (mul-interval interval2 interval1))
(print-interval (mul-interval interval2 interval2))
(print-interval (mul-interval interval2 interval3))
(print-interval (mul-interval interval3 interval1))
(print-interval (mul-interval interval3 interval2))
(print-interval (mul-interval interval3 interval3))

(define (make-center-percent c p)
    (make-interval (* c (- 1 p)) (* c (+ 1 p))))
(define (center i)
    (/ (+ (lower-bound i) (upper-bound i)) 2))
(define (width i)
    (/ (- (upper-bound i) (lower-bound i)) 2))
(define (percent i)
    
	(/ (width i) (center i)))
